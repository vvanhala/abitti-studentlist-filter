/**
 * A filter for abitti-exam supervisor view student list.

 * This is a utility script to filter a student list in an abitti exam 
 * supervisor view. The student list gets very crowded when 
 * there are many different exams on one server. 
 * With this script it is possible to see only a filtered subset of students.
 *
 * @link   github.com/vvanhala/abitti-studentlist-filter
 * @author Valtteri Vanhala
 * @since  19.12.2019
 */

/**
 * IMPORTANT: Never copy paste code into a javascript console that 
 * you do not understand! It is highly inadvisable and can be used for 
 * malicious purposes.
 * 
 *  Usage: 
 * - Save this script on a usb key  as a .txt file (or your preferred format).
 * - Insert the usb key in an abitti supervisor computer.
 * - Right click on the desktop and choose open terminal
 * - In the terminal window type: "xdg-open ." to open a file browser
 * - Open the usb1 folder and open your script file
 * - Copy the contents of the script (Ctrl+C)
 * - Open the supervisor view in Firefox with a list of the student attending the exam
 * - Right click on the page and choose Inspector and there choose console
 * - Paste the copied code in the input field at the bottom of the console and press Enter
 * - A Filtering window will apper above the student listing where you can now 
 *   type a filter and all matching rows will be displayed
 * - You can now close the inspector and enjoy a less crowded student listing
 */

/* ----------------------------------------------------------------
 *  Hide all table rows initially, then traverse through all table  
 *  cells and if content matches input filter then show current row.
 *  Adapted from: https://stackoverflow.com/a/51187579
*/----------------------------------------------------------------
function filterStudents() {
  var myinput, filter, table, tr, td, i;
  myinput = document.getElementById("myInput");
  //Change to uppercase so that filtering is case insensitive
  filter = myinput.value.toUpperCase();
  table = document.getElementById("students-and-answers");
  tr = table.getElementsByTagName("tr");
 //Traverse all rows
 for (i = 1; i < tr.length; i++) {
    // Hide the row initially.
    tr[i].style.display = "none";

    td = tr[i].getElementsByTagName("td");
    //Traverse all cells
    for (var j = 0; j < td.length; j++) {
      cell = tr[i].getElementsByTagName("td")[j];
      if (cell) {
        if (cell.innerHTML.toUpperCase().indexOf(filter) > -1) {
          //Set display to empty to show row
          tr[i].style.display = "";
          break;
        } 
      }
    }
  }
}

/*--------------------------------------------------------------
 *  Add the input field on the screen just above the student list
*/--------------------------------------------------------------

//Select parent element where the input field will be placed
var parent = document.getElementById("exam-instructions"); 

// Prepare input
var input = document.createElement("input");
input.type = "text";
input.id = "myInput";

// Attach the filtering function to onkeyup-event
input.setAttribute('onkeyup', 'filterStudents()'); 

// Create textfield at the end of exam-instructions-div
parent.appendChild(input); 

/*----------------------------------------------------------------------------------
 *  The student list table is constantly changing, so a mutation observer is needed
*/----------------------------------------------------------------------------------

// Select the node that will be observed for mutations
// exam-stats is a parent to students-and-answers -table
var targetNode = document.getElementById('exam-stats');

// Options for the observer (which mutations to observe)
var config = {childList: true, subtree: true };

// Create an observer instance linked to the filterStudents function.
// This will be called whenever a change is detected in the exam-stats
var observer = new MutationObserver(filterStudents);

// Start observing the target node for configured mutations
observer.observe(targetNode, config);
